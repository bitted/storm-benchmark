#!/usr/bin/python
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import subprocess as sub
import sys
import yaml

def wordcount(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.FileReadWordCount"
    exec_benchmark(benchmark, global_config, benchmark_config)

def sol(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.SOL"
    exec_benchmark(benchmark, global_config, benchmark_config)

def rollingsort(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.rollingsort"
    exec_benchmark(benchmark, global_config, benchmark_config)

def rollingcount(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.rollingcount"
    exec_benchmark(benchmark, global_config, benchmark_config)

def drpc(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.DRPC"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def grep(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.Grep"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def trident(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.Trident"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def pageview(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.PageView"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def uniquevisitor(global_config, benchmark_config):
    benchmark = "storm.benchmakr.benchmarks.UniqueVisitor"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def datacleanse(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.stocktweets.DataCleanse"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def kafkasol(global_config, benchmark_config):
    benchmark = "storm.benchmark.benchmarks.KafkaSOL"
    exec_producer_benchmark(benchmark, global_config, benchmark_config)

def exec_producer_benchmark(benchmark, global_config, benchmark_config):
    storm_cmd, jar_file, main_class, topology_name, all_args = read_config(global_config, benchmark_config)
    producer_class, producer_name, producer_args = read_producer_config(global_config, benchmark_config)
    run_topology(storm_cmd, jar_file, main_class, producer_class, producer_args)
    run_topology(storm_cmd, jar_file, main_class, benchmark, all_args)
    kill_topology(storm_cmd, topology_name)
    kill_topology(storm_cmd, producer_name)


def exec_benchmark(benchmark, global_config, benchmark_config):
    storm_cmd, jar_file, main_class, topology_name, all_args = read_config(global_config, benchmark_config)
    run_topology(storm_cmd, jar_file, main_class, benchmark, all_args)
    kill_topology(storm_cmd, topology_name)

def run_topology(storm_cmd, jar_file, main_class, topology, args):
    run_args = [storm_cmd, "jar", jar_file, main_class, topology] + args
    sub.call(run_args)

def kill_topology(storm_cmd, topology_name):
    kill_args = [storm_cmd, "kill", topology_name]
    sub.call(kill_args)


def unknown_benchmark():
    print "Unknown benchmark %s" % sys.argv[1]

def print_usage():
    print "Usage: stormbench [benchmark]"
    print "benchmarks:\n\t", "\n\t".join(sorted(benchmarks.keys()))

def read_config(global_config, benchmark_config):
    storm_cmd = global_config["storm.cmd.path"]
    jar_file = global_config["storm.benchmark.jar.path"]
    main_class = global_config["storm.benchmark.main_class"]
    topology_name = benchmark_config["topology.name"]
    all_config = {}
    all_args = []

    all_config.update(read_global_config(global_config))
    # benchmark_config could override global_config
    for k, v in benchmark_config.iteritems():
        all_config[k] = v

    for k, v in all_config.iteritems():
        all_args.append("-c")
        all_args.append("%s=%s" % (k, v))

    return storm_cmd, jar_file, main_class, topology_name, all_args

def read_producer_config(global_config, benchmark_config):
    producer_class = benchmark_config["producer.class"]
    producer_name = benchmark_config["producer.name"]
    producer_config = {}
    producer_args = []

    producer_config.extend(read_global_config(global_config))
    for k, v in benchmark_config.iteritems():
        if k.startswith("producer.") and k != "producer.class":
                # strip off "producer." prefix
                producer_config[k[9:]] = v

    for k, v in producer_config.iteritems():
        producer_args.append("-c %s=%s" % (k, v))
    return producer_class, producer_name, producer_args

def read_global_config(global_config):
    config = {}
    for k, v in global_config.iteritems():
        if k != "storm.cmd.path" and k != "storm.benchmark.jar.path" and k != "storm.benchmark.main_class":
            config[k] = v
    return config

def load_config(file):
    with open(file, "r") as stream:
        return yaml.load(stream)


benchmarks = {"wordcount": wordcount, "sol": sol, "rollingsort": rollingsort,
              "rollingcount": rollingcount, "drpc": drpc, "grep": grep,
              "trident": trident, "pageview": pageview, "uniquevisitor": uniquevisitor,
              "datacleanse": datacleanse, "kafkasol": kafkasol}
def main():
    if len(sys.argv) <= 1:
        print_usage()
        sys.exit(-1)
    if not benchmarks.has_key(sys.argv[1]):
        unknown_benchmark()
        sys.exit(-1)
    benchmark = sys.argv[1]
    global_config = load_config("./config/global.yaml")
    benchmark_config = load_config("./config/%s.yaml" % benchmark)
    (benchmarks[benchmark])(global_config, benchmark_config)

if __name__ == "__main__":
    main()
